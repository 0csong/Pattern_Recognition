geometric_transform.py 파일에서 opencv를 사용하여 도출한 행렬 cv_M과 동일한 결과를 갖도록 



이동/ 회전 변환 행렬을 적절히 혼합하여 단일 변환 행렬 my_M를 완성하세요. 



(.py 소스파일만 제출)







※ 추가 설명



- 원점(0,0)을 기준으로 회전변환을 적용하면 원하는 결과와 다른 결과를 얻게 됩니다.



- 원하는 결과를 얻기 위해서는 기준을 중심점(-width/2, -height/2)으로 이동 변환 후, 회전 변환을 적용하고, 기준을 원래의 원점(0, 0)으로 재이동하는 변환을 순서대로 수행해주어야 합니다.



- 위의 3개 변환 행렬을 단일 변환행렬로 합친 것이 my_M 행렬이 됩니다.



- 이 때, OpenCV는 변환행렬 곱셈 연산의 순서가 교재 슬라이드와 반대이므로 특별히 유의해야 합니다. 가장 먼저 적용할 변환행렬이 우측에 존재해야 합니다.



  (교재 슬라이드 "좌표 x 변환행렬"순.  OpenCV의 경우 "변환행렬 x 좌표"순)



- 참고로 기준을 원점에서 중심점으로 이동하는 첫 번째 이동변환 행렬은 다음과 같이 표현됩니다.



fwd_tran_M = np.array([[1, 0, -width/2],

                                     [0, 1, -height/2],

                                     [0, 0,          1]])





- 변환행렬 도출과정에서는 동차 행렬 표현(즉, 3x3 행렬)으로 작성하되 변환을 적용하는 cv2.warpAffine 함수에서 행렬 파라미터 위치에는 동차행렬 형태가 아닌 동차 행을 제외한 2행 3열 형태의 행렬로 넘겨주어야 됩니다. (리스트/배열 자료형의 슬라이싱 기능 이용 => my_M[:2, ])



- 또한, cv2.warpAffine 함수에 첫 번째 파라미터에 이미지 배열을 입력하면, 자동으로 이미지 내 모든 픽셀 좌표에 대하여 변환을 수행한 결과를 리턴해줍니다. 즉, 각 픽셀 별로 변환을 일일이 수행하는 코드를 작성할 필요가 없습니다.



- 참고로, OpenCV 함수에 대한 세부 기능 및 파라미터는 웹 검색을 통해서 스스로 공부하면 되겠습니다.